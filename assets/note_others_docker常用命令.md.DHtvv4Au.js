import{_ as i,c as a,o as e,ae as t}from"./chunks/framework.DDKhDN6D.js";const k=JSON.parse('{"title":"Docker常用命令整理","description":"","frontmatter":{},"headers":[],"relativePath":"note/others/docker常用命令.md","filePath":"note/others/docker常用命令.md"}'),o={name:"note/others/docker常用命令.md"};function n(l,s,r,d,h,p){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="docker常用命令整理" tabindex="-1">Docker常用命令整理 <a class="header-anchor" href="#docker常用命令整理" aria-label="Permalink to &quot;Docker常用命令整理&quot;">​</a></h1><p>以下是Docker常用命令的整理，按功能分类说明：</p><h2 id="一、容器生命周期管理" tabindex="-1"><strong>一、容器生命周期管理</strong> <a class="header-anchor" href="#一、容器生命周期管理" aria-label="Permalink to &quot;**一、容器生命周期管理**&quot;">​</a></h2><ol><li><p><strong><code>docker run [OPTIONS] IMAGE [COMMAND]</code></strong><br><strong>作用</strong>：创建并启动容器。<br><strong>常用选项</strong>：</p><ul><li><code>-d</code>：后台运行容器（守护进程）。</li><li><code>--name</code>：为容器命名（默认随机生成）。</li><li><code>-p 宿主机端口:容器端口</code>：端口映射（例：<code>-p 80:80</code>）。</li><li><code>-v 宿主机路径:容器路径</code>：挂载数据卷（例：<code>-v /data:/app/data</code>）。</li><li><code>-e KEY=VALUE</code>：设置环境变量（例：<code>-e MYSQL_ROOT_PASSWORD=123</code>）。</li><li><code>--rm</code>：容器停止后自动删除（测试时常用）。<br><strong>示例</strong>：</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 80:80</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span></span></code></pre></div></li><li><p><strong><code>docker start/stop/restart 容器名或ID</code></strong></p><ul><li><code>start</code>：启动已存在的容器。</li><li><code>stop</code>：停止运行中的容器。</li><li><code>restart</code>：重启容器。</li></ul></li><li><p><strong><code>docker rm [OPTIONS] 容器名或ID</code></strong><br><strong>作用</strong>：删除容器。<br><strong>常用选项</strong>：</p><ul><li><code>-f</code>：强制删除运行中的容器。</li><li><code>-v</code>：同时删除关联的卷。<br><strong>示例</strong>：</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_nginx</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 强制删除容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -aq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除所有已停止的容器</span></span></code></pre></div></li><li><p><strong><code>docker pause/unpause 容器名或ID</code></strong><br><strong>作用</strong>：暂停/恢复容器内的所有进程。</p></li></ol><hr><h2 id="二、镜像管理" tabindex="-1"><strong>二、镜像管理</strong> <a class="header-anchor" href="#二、镜像管理" aria-label="Permalink to &quot;**二、镜像管理**&quot;">​</a></h2><ol><li><p><strong><code>docker images [OPTIONS]</code></strong><br><strong>作用</strong>：列出本地镜像。<br><strong>常用选项</strong>：</p><ul><li><code>-q</code>：仅显示镜像ID。<br><strong>示例</strong>：</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 查看所有镜像</span></span></code></pre></div></li><li><p><strong><code>docker pull 镜像名:标签</code></strong><br><strong>作用</strong>：从仓库拉取镜像（默认标签为<code>latest</code>）。<br><strong>示例</strong>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu:20.04</span></span></code></pre></div></li><li><p><strong><code>docker rmi [OPTIONS] 镜像名或ID</code></strong><br><strong>作用</strong>：删除镜像。<br><strong>常用选项</strong>：</p><ul><li><code>-f</code>：强制删除（如果镜像被容器使用需先删除容器）。<br><strong>示例</strong>：</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rmi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span></span></code></pre></div></li><li><p><strong><code>docker build [OPTIONS] 上下文路径</code></strong><br><strong>作用</strong>：根据Dockerfile构建镜像。<br><strong>常用选项</strong>：</p><ul><li><code>-t 镜像名:标签</code>：指定镜像名称和标签。</li><li><code>--no-cache</code>：不使用缓存构建。<br><strong>示例</strong>：</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_app:v1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div></li></ol><hr><h2 id="三、网络管理" tabindex="-1"><strong>三、网络管理</strong> <a class="header-anchor" href="#三、网络管理" aria-label="Permalink to &quot;**三、网络管理**&quot;">​</a></h2><ol><li><p><strong><code>docker network ls</code></strong><br><strong>作用</strong>：列出所有Docker网络（默认包含<code>bridge</code>、<code>host</code>、<code>none</code>）。</p></li><li><p><strong><code>docker network create 网络名</code></strong><br><strong>示例</strong>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> network</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_net</span></span></code></pre></div></li><li><p><strong><code>docker network connect/disconnect 网络名 容器名</code></strong><br><strong>作用</strong>：将容器连接到指定网络或断开连接。</p></li></ol><hr><h2 id="四、日志与检查" tabindex="-1"><strong>四、日志与检查</strong> <a class="header-anchor" href="#四、日志与检查" aria-label="Permalink to &quot;**四、日志与检查**&quot;">​</a></h2><ol><li><p><strong><code>docker logs [OPTIONS] 容器名或ID</code></strong><br><strong>常用选项</strong>：</p><ul><li><code>-f</code>：实时跟踪日志（类似<code>tail -f</code>）。</li><li><code>--tail N</code>：显示最后N行日志。<br><strong>示例</strong>：</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --tail</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_nginx</span></span></code></pre></div></li><li><p><strong><code>docker exec [OPTIONS] 容器名或ID COMMAND</code></strong><br><strong>作用</strong>：在运行中的容器内执行命令。<br><strong>常用选项</strong>：</p><ul><li><code>-it</code>：进入交互式终端。<br><strong>示例</strong>：</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_nginx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /bin/bash</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 进入容器终端</span></span></code></pre></div></li></ol><hr><h2 id="五、系统信息" tabindex="-1"><strong>五、系统信息</strong> <a class="header-anchor" href="#五、系统信息" aria-label="Permalink to &quot;**五、系统信息**&quot;">​</a></h2><ol><li><p><strong><code>docker ps [OPTIONS]</code></strong><br><strong>作用</strong>：列出容器。<br><strong>常用选项</strong>：</p><ul><li><code>-a</code>：显示所有容器（包括已停止的）。</li><li><code>-q</code>：仅显示容器ID。<br><strong>示例</strong>：</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 查看所有容器</span></span></code></pre></div></li><li><p><strong><code>docker stats [容器名或ID]</code></strong><br><strong>作用</strong>：实时显示容器资源使用情况（CPU、内存等）。</p></li><li><p><strong><code>docker info</code></strong> 和 <strong><code>docker version</code></strong><br><strong>作用</strong>：查看Docker系统信息和版本。</p></li></ol><hr><h2 id="六、数据管理" tabindex="-1"><strong>六、数据管理</strong> <a class="header-anchor" href="#六、数据管理" aria-label="Permalink to &quot;**六、数据管理**&quot;">​</a></h2><ol><li><p><strong><code>docker volume create 卷名</code></strong><br><strong>示例</strong>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_volume</span></span></code></pre></div></li><li><p><strong><code>docker volume ls</code></strong><br><strong>作用</strong>：列出所有数据卷。</p></li><li><p><strong><code>docker volume inspect 卷名</code></strong><br><strong>作用</strong>：查看卷的详细信息（如挂载路径）。</p></li></ol><hr><h2 id="七、其他常用命令" tabindex="-1"><strong>七、其他常用命令</strong> <a class="header-anchor" href="#七、其他常用命令" aria-label="Permalink to &quot;**七、其他常用命令**&quot;">​</a></h2><ol><li><p><strong><code>docker cp 宿主机路径 容器名:容器路径</code></strong><br><strong>作用</strong>：在宿主机和容器之间复制文件。<br><strong>示例</strong>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file.txt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_nginx:/app/</span></span></code></pre></div></li><li><p><strong><code>docker commit 容器名或ID 新镜像名:标签</code></strong><br><strong>作用</strong>：将容器保存为新的镜像（慎用，推荐使用Dockerfile构建）。</p></li><li><p><strong><code>docker login/logout</code></strong><br><strong>作用</strong>：登录/登出镜像仓库（如Docker Hub）。</p></li><li><p><strong><code>docker push 镜像名:标签</code></strong><br><strong>作用</strong>：推送镜像到仓库。</p></li></ol><hr><h2 id="总结" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;**总结**&quot;">​</a></h2><p>以上命令覆盖了Docker的核心操作，适用于容器生命周期管理、镜像构建、网络配置及日常调试。建议结合实践加深理解，例如通过<code>docker run</code>启动容器后，使用<code>docker exec</code>进入容器调试。</p>`,25)]))}const g=i(o,[["render",n]]);export{k as __pageData,g as default};
