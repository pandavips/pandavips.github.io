import{_ as a,c as i,o as n,ae as e}from"./chunks/framework.BHckWpNH.js";const c=JSON.parse('{"title":"团队代码风格统一方案","description":"","frontmatter":{},"headers":[],"relativePath":"blog/2023/2023-09-25.团队代码风格统一方案.md","filePath":"blog/2023/2023-09-25.团队代码风格统一方案.md"}'),p={name:"blog/2023/2023-09-25.团队代码风格统一方案.md"};function t(l,s,h,k,r,d){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="团队代码风格统一方案" tabindex="-1">团队代码风格统一方案 <a class="header-anchor" href="#团队代码风格统一方案" aria-label="Permalink to &quot;团队代码风格统一方案&quot;">​</a></h1><h2 id="今天碰到一个不大不小的问题" tabindex="-1">今天碰到一个不大不小的问题 <a class="header-anchor" href="#今天碰到一个不大不小的问题" aria-label="Permalink to &quot;今天碰到一个不大不小的问题&quot;">​</a></h2><p>前排提示：本片文章内容较为浅显，只适合作为一个抛砖引玉的作用，如果你希望得到一个较为详细的指南，那么本文可能不适合。</p><p>在平时工作中，如果大家的代码风格不统一，那么会出现的一个问题是，git记录会出现混乱的情况，导致合并代码变得较为困难，其难度呈指数型上升。所以，在日常工作中我们都会进行一些工程化配置来约束我们的代码风格，进而避免出现上述情况。</p><h2 id="话不多说-直接上方案" tabindex="-1">话不多说,直接上方案 <a class="header-anchor" href="#话不多说-直接上方案" aria-label="Permalink to &quot;话不多说,直接上方案&quot;">​</a></h2><p>目前在前端主流方案中,通常是<code>prettier</code>和<code>eslint</code>,以及<code>editorconfig</code>三剑客来约束代码风格</p><h2 id="prettier" tabindex="-1">prettier <a class="header-anchor" href="#prettier" aria-label="Permalink to &quot;prettier&quot;">​</a></h2><p>它是一个代码格式化工具,在一致的配置下,使用它格式化可以获得统一的代码风格.</p><p>使用也很简单,vscode安装它 <a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode" target="_blank" rel="noreferrer">https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode</a></p><p>然后在根目录创建<code>prettier.config.js</code>配置文件,将编辑器的默认格式化工具设置为prettier(这个总不用教吧 =.=)</p><p>简单的配置方案示例:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// https://www.prettier.cn/docs/install.html</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 一行最多多少个字符</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> printWidth: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">150</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 指定每个缩进级别的空格数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tabWidth: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 使用制表符而不是空格缩进行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> useTabs: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 在语句末尾打印分号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> semi: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 使用单引号而不是双引号</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 在对象文字中的括号之间打印空格</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bracketSpacing: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // jsx 标签的反尖括号需要换行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jsxBracketSameLine: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 在单独的箭头函数参数周围包括括号 always：(x) =&gt; x \\ avoid：x =&gt; x</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arrowParens: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;always&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 这两个选项可用于格式化以给定字符偏移量（分别包括和不包括）开始和结束的代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rangeStart: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rangeEnd: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Infinity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 指定要使用的解析器，不需要写文件开头的 @prettier</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> requirePragma: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 不需要自动在文件开头插入 @prettier</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> insertPragma: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 使用默认的折行标准 always\\never\\preserve</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> proseWrap: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;preserve&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 指定HTML文件的全局空格敏感度 css\\strict\\ignore</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> htmlWhitespaceSensitivity: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> singleQuote: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 更改引用对象属性的时间 可选值&quot;&lt;as-needed|consistent|preserve&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> quoteProps: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;as-needed&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 在JSX中使用单引号而不是双引号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jsxSingleQuote: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 多行时尽可能打印尾随逗号。（例如，单行数组永远不会出现逗号结尾。） 可选值&quot;&lt;none|es5|all&gt;&quot;，默认none</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> trailingComma: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;none&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Vue文件脚本和样式标签缩进</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vueIndentScriptAndStyle: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 换行符使用 lf 结尾是 可选值&quot;&lt;auto|lf|crlf|cr&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endOfLine: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;lf&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="eslint" tabindex="-1">eslint <a class="header-anchor" href="#eslint" aria-label="Permalink to &quot;eslint&quot;">​</a></h2><p>通常我们不会自己去配置这个工具,因为规则实在是太多了,所以我们一般是直接使用社区的配置。 而在我们日常的开发中,一般脚手架都会默认帮我们创建这些内容,所以此处略过。</p><p>通常我们也会安装它的vscode拓展来更好的支持它 <a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint" target="_blank" rel="noreferrer">https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint</a></p><h2 id="editorconfig" tabindex="-1">editorconfig <a class="header-anchor" href="#editorconfig" aria-label="Permalink to &quot;editorconfig&quot;">​</a></h2><p>有人喜欢用vscode，有人喜欢用webstorm，那怎么保持代码风格统一呢？那就要祭出这个大杀器</p><p>使用也很简单</p><p>安装拓展（webstorm插件商店也会有它，放心~）</p><p><a href="https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig" target="_blank" rel="noreferrer">https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig</a></p><p>在项目根目录创建<code>.editorconfig</code>文件，下边是一个简单的配置方案</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Editor configuration, see http://editorconfig.org</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 表示是最顶层的 EditorConfig 配置文件</span></span>
<span class="line"><span>root = true</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[*] # 表示所有文件适用</span></span>
<span class="line"><span>charset = utf-8 # 设置文件字符集为 utf-8</span></span>
<span class="line"><span>indent_style = space # 缩进风格（tab | space）</span></span>
<span class="line"><span>indent_size = 2 # 缩进大小</span></span>
<span class="line"><span>end_of_line = lf # 控制换行类型(lf | cr | crlf)</span></span>
<span class="line"><span>trim_trailing_whitespace = true # 去除行首的任意空白字符</span></span>
<span class="line"><span>insert_final_newline = true # 始终在文件末尾插入一个新行</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[*.md] # 表示仅 md 文件适用以下规则</span></span>
<span class="line"><span>max_line_length = off</span></span>
<span class="line"><span>trim_trailing_whitespace = false</span></span></code></pre></div><h2 id="有了这三剑客" tabindex="-1">有了这三剑客 <a class="header-anchor" href="#有了这三剑客" aria-label="Permalink to &quot;有了这三剑客&quot;">​</a></h2><p>不用关心代码风格问题了,可以专心编码了！</p>`,24)]))}const o=a(p,[["render",t]]);export{c as __pageData,o as default};
