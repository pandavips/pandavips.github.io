import{_ as l,c as i,o as e,ae as r}from"./chunks/framework.BHckWpNH.js";const p=JSON.parse('{"title":"设计模式初见","description":"","frontmatter":{},"headers":[],"relativePath":"blog/2022/2022-10-31.设计模式之初见.md","filePath":"blog/2022/2022-10-31.设计模式之初见.md"}'),o={name:"blog/2022/2022-10-31.设计模式之初见.md"};function t(h,a,d,n,s,c){return e(),i("div",null,a[0]||(a[0]=[r('<h1 id="设计模式初见" tabindex="-1">设计模式初见 <a class="header-anchor" href="#设计模式初见" aria-label="Permalink to &quot;设计模式初见&quot;">​</a></h1><h2 id="什么是设计模式-为什么需要设计模式" tabindex="-1">什么是设计模式?为什么需要设计模式? <a class="header-anchor" href="#什么是设计模式-为什么需要设计模式" aria-label="Permalink to &quot;什么是设计模式?为什么需要设计模式?&quot;">​</a></h2><p>为了解决软件设计中普遍存在的问题,前辈们总结了一些解决方案.而我们熟知的设计模式是前辈们通过经验总结下来的标准或者思路,它经受住了时间的考验;<code>设计模式</code>一词是由<code>埃里希·伽马</code>由建筑设计领域引进计算机世界;</p><p>那么设计模式体现在哪些地方呢?通常一个软件的组成由小到大:编程语言(现在大部分语言都是面向对象的设计模式)+功能模块(多种设计模式+算法)+框架(很多种设计模式)+架构(服务器集群等)</p><p>使用设计模式能适应多变的需求,增强程序的拓展性,以更清晰的思路实现功能,以及很大程度的提高应用的可维护程度(可读性,规范化).如果你想成为一名合格的软件开发人员,那么设计模式是你必须接触的东西.</p><h2 id="设计原则-solid" tabindex="-1">设计原则(SOLID) <a class="header-anchor" href="#设计原则-solid" aria-label="Permalink to &quot;设计原则(SOLID)&quot;">​</a></h2><p>我们先来看看unix的设计哲学吧,他和设计模式的一些设计原则有很多相似的部分</p><ul><li>小而美 保持程序的简洁,保证最简洁的api</li><li>每个程序只做一件事 每个函数就可以成为一个程序,这也是我们经常说的每个函数只做一件事</li><li>快速搭建原型 先做出来,再维护,再优化</li><li>可移植性大于性能 当可移植性和性能发生冲突时,优先取可移植性</li><li>可读性最重要 优先保证程序的可读性</li><li>提高复用性 这个可以说是程序员的共识了,解耦复用</li></ul><p>是不是总有种似曾相识的感觉?哈哈哈哈,是了,和我们平时开发所提倡的一些东西有很大交集.正式开始我们的五大设计原则吧</p><h3 id="s-单一职责" tabindex="-1">S 单一职责 <a class="header-anchor" href="#s-单一职责" aria-label="Permalink to &quot;S 单一职责&quot;">​</a></h3><p>一个程序只做好一件事;对于功能复杂的函数,可以进行拆分,每个部分保证独立;</p><h3 id="o-开放封闭" tabindex="-1">O 开放封闭 <a class="header-anchor" href="#o-开放封闭" aria-label="Permalink to &quot;O 开放封闭&quot;">​</a></h3><p>对拓展开放,对修改封闭;增加需求时,拓展新代码,而非修改已有代码</p><h3 id="l-李氏置换" tabindex="-1">L 李氏置换 <a class="header-anchor" href="#l-李氏置换" aria-label="Permalink to &quot;L 李氏置换&quot;">​</a></h3><p>子类能够覆盖父类;父类能出现的地方,子类就可以出现;</p><h3 id="i-接口独立" tabindex="-1">I 接口独立 <a class="header-anchor" href="#i-接口独立" aria-label="Permalink to &quot;I 接口独立&quot;">​</a></h3><p>保持接口单一独立,避免出现复合接口,和单一职责有点相似,但是专注于接口</p><h3 id="d-依赖导致" tabindex="-1">D 依赖导致 <a class="header-anchor" href="#d-依赖导致" aria-label="Permalink to &quot;D 依赖导致&quot;">​</a></h3><p>面向接口(抽象)编程,依赖于抽象而不依赖于具体;使用方只关注接口而不用去关注具体实现</p><h2 id="_23种设计模式" tabindex="-1">23种设计模式 <a class="header-anchor" href="#_23种设计模式" aria-label="Permalink to &quot;23种设计模式&quot;">​</a></h2><p>设计模式大体可分为以下几大类</p><h3 id="创建型" tabindex="-1">创建型 <a class="header-anchor" href="#创建型" aria-label="Permalink to &quot;创建型&quot;">​</a></h3><ul><li>工厂方法模式</li><li>抽象工厂模式</li><li>建造者模式</li><li>单例模式</li><li>原型模式</li></ul><h3 id="结构型" tabindex="-1">结构型 <a class="header-anchor" href="#结构型" aria-label="Permalink to &quot;结构型&quot;">​</a></h3><ul><li>适配器模式</li><li>装饰器模式</li><li>代理模式</li><li>外观模式</li><li>桥接模式</li><li>组合模式</li><li>享元模式</li></ul><h3 id="行为型" tabindex="-1">行为型 <a class="header-anchor" href="#行为型" aria-label="Permalink to &quot;行为型&quot;">​</a></h3><ul><li>策略模式</li><li>迭代器模式</li><li>模板方法模式</li><li>职责连模式</li><li>观察者模式</li><li>命令模式</li><li>备忘录模式</li><li>中介者模式</li><li>状态模式</li><li>解释器模式</li><li>访问者模式</li></ul>',27)]))}const _=l(o,[["render",t]]);export{p as __pageData,_ as default};
