import{_ as i,c as a,o as t,ae as l}from"./chunks/framework.BHckWpNH.js";const c=JSON.parse('{"title":"带你读红宝书-第二章-HTML中的JavaScript","description":"","frontmatter":{},"headers":[],"relativePath":"blog/2022/2022-10-07.带你读红宝书-第二章-HTML中的JavaScript.md","filePath":"blog/2022/2022-10-07.带你读红宝书-第二章-HTML中的JavaScript.md"}'),h={name:"blog/2022/2022-10-07.带你读红宝书-第二章-HTML中的JavaScript.md"};function n(p,s,e,k,r,d){return t(),a("div",null,s[0]||(s[0]=[l(`<h1 id="带你读红宝书-第二章-html中的javascript" tabindex="-1">带你读红宝书-第二章-HTML中的JavaScript <a class="header-anchor" href="#带你读红宝书-第二章-html中的javascript" aria-label="Permalink to &quot;带你读红宝书-第二章-HTML中的JavaScript&quot;">​</a></h1><h2 id="如何将javascript插入到页面中" tabindex="-1">如何将JavaScript插入到页面中? <a class="header-anchor" href="#如何将javascript插入到页面中" aria-label="Permalink to &quot;如何将JavaScript插入到页面中?&quot;">​</a></h2><p>我们通常使用<code>&lt;script&gt;</code>元素来将脚本插入到页面中,不管是行内还是外部的脚本,他都会阻塞页面的渲染,你可以通过一些属性来改善,它的一些属性(?:表示可选属性):</p><ul><li>async?:只对外部脚本有效,立即下载这个脚本,但不能阻止其他资源和脚本的加载</li><li>charset?:字符集编码,发展到现在可以直接忽略它的存在了</li><li>crossorigin?:配置请求的CORS设置,。crossorigin=&quot;anonymous&quot;配置文件请求不必设置凭据标志。crossorigin=&quot;use-credentials&quot;设置凭据标志，意味着出站请求会包含凭据。</li><li>defer?:只对外部脚本有效,表示脚本延迟到文档被完全解析和显示之后再执行.</li><li>integrity?:可以使用指定的加密签名来验证资源的完整性.比如放置到CDN上的资源被恶意修改,那么它的签名不会匹配,页面将会抛出错误.</li><li>language?:用来执行脚本的版本,如今已经废弃</li><li>src?:外部脚本的路径</li><li>type?:表示脚本的类型,按照惯例，这个值始终都是&quot;text/javascript&quot;.如果这个至是<code>module</code>,则代表这个脚本是ES6模块,将可以再这个元素内使用<code>import</code>,<code>export</code>等关键字</li></ul><h3 id="行内jio本" tabindex="-1">行内jio本 <a class="header-anchor" href="#行内jio本" aria-label="Permalink to &quot;行内jio本&quot;">​</a></h3><p>来看一个有趣的</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sayScript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;/script&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>这段代码看似没什么问题,实际上他会报错,因为脚本被提前结束了,如果想要正常输出<code>&quot;&lt;/script&gt;&quot;</code>,就需要对其进行转义啦</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sayScript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">script&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="外部jio本" tabindex="-1">外部jio本 <a class="header-anchor" href="#外部jio本" aria-label="Permalink to &quot;外部jio本&quot;">​</a></h3><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>使用了src属性后,不应该再使用行内样式的书写,通常行内的代码不会再次执行</p><p>❌bad example:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123456</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>src可以是一个网络请求,也可以是同域中的资源,当是一个url时,会发出一个get请求,不受同源策略的影响,但是其内执行的脚本受同源策略的影响</p><h4 id="defer属性-讨论下脚本在页面中的位置" tabindex="-1">defer属性:讨论下脚本在页面中的位置 <a class="header-anchor" href="#defer属性-讨论下脚本在页面中的位置" aria-label="Permalink to &quot;defer属性:讨论下脚本在页面中的位置&quot;">​</a></h4><p>我们通常会将JavaScript脚本放置到页面底部,这是什么原因呢?我们前文提到过,脚本的执行还会阻塞页面的渲染,所以可以想象到,如果我们一个脚本所执行需要的耗时很长,而它被我们放置到了头部,那么再这个脚本执行完之前,一切渲染功能都停止了,用户看到的会是一个白页面,而将脚本执行完毕,渲染完毕,这个白页面的时间太长了,会让用户有一种感觉,那就是你的网站加载很慢~而放置到底部,就不会有这个问题了,即使用户提前看到的不是一个完整的应用,但是体验仍旧会好很多</p><p>如果你硬要将脚本放置到头部,那么也会有解决方案,那就是defer,他会等文档全部解析显示之后才会开始执行,但是他只对外部脚本有效,行内脚本会忽略这个属性.如果多个defer脚本,他们会按照放置的顺序执行.</p><h4 id="async属性" tabindex="-1">async属性 <a class="header-anchor" href="#async属性" aria-label="Permalink to &quot;async属性&quot;">​</a></h4><p>它和defer基本一致,不同点:</p><ul><li>它可能不会按照放置的顺序执行,所以你必须保证他们之间没有依赖关系</li><li>不阻塞浏览器的其他工作,即不用等待该脚本的下载和执行,也因此不应该出现操作dom的情况</li></ul><p>你可以理解为这个属性专门开启了一条线程来负责该脚本的下载执行,完全不影响主线程的执行</p><h2 id="动态脚本" tabindex="-1">动态脚本 <a class="header-anchor" href="#动态脚本" aria-label="Permalink to &quot;动态脚本&quot;">​</a></h2><p>我们可以使用DOM的<code>createElement</code>这个api来创建一个动态插入到页面的脚本</p><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> script </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;script&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">script.src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;gibberish.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">script.async </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.head.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(script);</span></span></code></pre></div><p>在将创建的元素插入到页面之前,是不会发出请求的,这种方式会默认以异步的方式加载脚本,所以我们手动设置了<code>async</code>属性为false;这种方式对浏览器的预加载是不可见的,所以性能会严重影响,所以我们可以在头部添加</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preload&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gibberish.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>来告知浏览器将来我们会使用这些资源,请进行预加载</p><h2 id="noscript-元素" tabindex="-1"><code>&lt;noscript&gt;</code>元素 <a class="header-anchor" href="#noscript-元素" aria-label="Permalink to &quot;\`&lt;noscript&gt;\`元素&quot;">​</a></h2><p>用于在不支持的浏览器中,其中的内容会被当做文档解析;这点经常搞<code>canvas</code>的人会比较有种熟悉感:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">canvas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;你的浏览器不支持canvas&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">canvas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>这个章节讨论了如何将JavaScript脚本插入到页面中,并介绍了他们之间的差异</p>`,33)]))}const o=i(h,[["render",n]]);export{c as __pageData,o as default};
